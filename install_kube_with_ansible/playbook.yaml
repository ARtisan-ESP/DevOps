---
- name: Install Kubernetes on Ubuntu 22.04
  hosts: all
  become: yes
  tasks:

    - name: Disable swap
      command: swapoff -a
      ignore_errors: yes

    - name: Disable swap permanently
      lineinfile:
        path: /etc/fstab
        regexp: "^/swap"
        line: "#/swap"

    - name: Install dependencies for containerd and Kubernetes
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg2
          - software-properties-common
        state: present
        update_cache: yes

    - name: Download and install containerd binary
      shell: |
        wget https://github.com/containerd/containerd/releases/download/v1.7.3/containerd-1.7.3-linux-amd64.tar.gz
        tar Cxzvf /usr/local containerd-1.7.3-linux-amd64.tar.gz
        wget https://raw.githubusercontent.com/containerd/containerd/main/containerd.service
        mkdir -p /usr/local/lib/systemd/system/
        mv containerd.service /usr/local/lib/systemd/system/
        systemctl daemon-reload
        systemctl enable --now containerd.service
      args:
        creates: /usr/local/bin/containerd

    - name: Install runc
      shell: |
        wget https://github.com/opencontainers/runc/releases/download/v1.1.9/runc.amd64
        install -m 755 runc.amd64 /usr/local/sbin/runc
      args:
        creates: /usr/local/sbin/runc

    - name: Add Docker's official GPG key
      shell: |
        install -m 0755 -d /etc/apt/keyrings
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
        chmod a+r /etc/apt/keyrings/docker.gpg
      args:
        creates: /etc/apt/keyrings/docker.gpg

    - name: Add Docker repository
      shell: |
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" > /etc/apt/sources.list.d/docker.list
        apt update
        apt install -y containerd.io
        containerd config default | tee /etc/containerd/config.toml
        sed -E -i 's/SystemdCgroup = false/SystemdCgroup = true/g' /etc/containerd/config.toml
        systemctl daemon-reload
        systemctl restart containerd.service
      args:
        creates: /etc/apt/sources.list.d/docker.list

    - name: Install CNI plugins
      shell: |
        wget https://github.com/containernetworking/plugins/releases/download/v1.3.0/cni-plugins-linux-amd64-v1.3.0.tgz
        mkdir -p /opt/cni/bin
        tar Cxzvf /opt/cni/bin cni-plugins-linux-amd64-v1.3.0.tgz
      args:
        creates: /opt/cni/bin/bridge

    - name: Load necessary kernel modules for Kubernetes
      shell: |
        tee /etc/modules-load.d/containerd.conf <<EOF
        overlay
        br_netfilter
        EOF
        modprobe br_netfilter overlay
      args:
        creates: /etc/modules-load.d/containerd.conf

    - name: Enable IPv4 forwarding
      shell: |
        sed -i 's/#net.ipv4.ip_forward=1/net.ipv4.ip_forward=1/g' /etc/sysctl.conf
        tee /etc/sysctl.d/kubernetes.conf <<EOF
        net.bridge.bridge-nf-call-ip6tables = 1
        net.bridge.bridge-nf-call-iptables = 1
        net.ipv4.ip_forward = 1
        EOF
        sysctl --system
      args:
        creates: /etc/sysctl.d/kubernetes.conf

    - name: Install kubeadm, kubelet, and kubectl
      ansible.builtin.get_url:
        url: https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key
        dest: /etc/apt/keyrings/kubernetes-apt-keyring.asc
        mode: '0644'
        force: true

    - name: Add Kubernetes repository
      ansible.builtin.apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.asc] https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /"
        state: present
        update_cache: true

    - name: Install packages
      ansible.builtin.package:
        name:
          - kubelet
          - kubeadm
          - kubectl
          - net-tools
        state: present

    - name: Hold version
      ansible.builtin.dpkg_selections:
        name: "{{ item }}"
        selection: hold
      with_items:
        - kubeadm
        - kubelet
        - kubectl

    - name: Allow user to run systemctl without password
      lineinfile:
        path: /etc/sudoers.d/{{ ansible_user }}
        create: yes
        mode: "0440"
        line: "{{ ansible_user }} ALL=(ALL) NOPASSWD: /bin/systemctl"

    - name: Reload systemd daemon
      command: systemctl daemon-reload

    - name: Start and enable containerd
      systemd:
        name: containerd
        enabled: yes
        state: started

    - name: Enable kubectl and kubeadm completion
      shell: |
        bash -c "kubeadm completion bash > /etc/bash_completion.d/kubeadm"
        bash -c "kubectl completion bash > /etc/bash_completion.d/kubectl"
      args:
        creates: /etc/bash_completion.d/kubeadm